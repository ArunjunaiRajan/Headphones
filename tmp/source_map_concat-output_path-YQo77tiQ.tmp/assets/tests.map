{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","headphones/tests/adapters/application.jshint.lint-test.js","headphones/tests/app.jshint.lint-test.js","headphones/tests/components/headset-listing.jshint.lint-test.js","headphones/tests/components/serach-filter.jshint.lint-test.js","headphones/tests/controllers/feedback.jshint.lint-test.js","headphones/tests/controllers/headsets/index.jshint.lint-test.js","headphones/tests/helpers/destroy-app.js","headphones/tests/helpers/destroy-app.jshint.lint-test.js","headphones/tests/helpers/module-for-acceptance.js","headphones/tests/helpers/module-for-acceptance.jshint.lint-test.js","headphones/tests/helpers/resolver.js","headphones/tests/helpers/resolver.jshint.lint-test.js","headphones/tests/helpers/start-app.js","headphones/tests/helpers/start-app.jshint.lint-test.js","headphones/tests/integration/components/headset-listing-test.js","headphones/tests/integration/components/headset-listing-test.jshint.lint-test.js","headphones/tests/integration/components/serach-filter-test.js","headphones/tests/integration/components/serach-filter-test.jshint.lint-test.js","headphones/tests/models/feedback.jshint.lint-test.js","headphones/tests/models/headset.jshint.lint-test.js","headphones/tests/models/in-ear.jshint.lint-test.js","headphones/tests/models/on-ear.jshint.lint-test.js","headphones/tests/resolver.jshint.lint-test.js","headphones/tests/router.jshint.lint-test.js","headphones/tests/routes/author.jshint.lint-test.js","headphones/tests/routes/contact.jshint.lint-test.js","headphones/tests/routes/feedback.jshint.lint-test.js","headphones/tests/routes/headsets.jshint.lint-test.js","headphones/tests/routes/headsets/index.jshint.lint-test.js","headphones/tests/routes/headsets/show.jshint.lint-test.js","headphones/tests/routes/in-ear.jshint.lint-test.js","headphones/tests/routes/in-ear/index.jshint.lint-test.js","headphones/tests/routes/in-ear/show.jshint.lint-test.js","headphones/tests/routes/index.jshint.lint-test.js","headphones/tests/routes/on-ear.jshint.lint-test.js","headphones/tests/routes/on-ear/index.jshint.lint-test.js","headphones/tests/routes/on-ear/show.jshint.lint-test.js","headphones/tests/test-helper.js","headphones/tests/test-helper.jshint.lint-test.js","headphones/tests/unit/adapters/application-test.js","headphones/tests/unit/adapters/application-test.jshint.lint-test.js","headphones/tests/unit/controllers/feedback-test.js","headphones/tests/unit/controllers/feedback-test.jshint.lint-test.js","headphones/tests/unit/controllers/headsets-test.js","headphones/tests/unit/controllers/headsets-test.jshint.lint-test.js","headphones/tests/unit/controllers/headsets/index-test.js","headphones/tests/unit/controllers/headsets/index-test.jshint.lint-test.js","headphones/tests/unit/models/feedback-test.js","headphones/tests/unit/models/feedback-test.jshint.lint-test.js","headphones/tests/unit/models/headset-test.js","headphones/tests/unit/models/headset-test.jshint.lint-test.js","headphones/tests/unit/models/headsets-test.js","headphones/tests/unit/models/headsets-test.jshint.lint-test.js","headphones/tests/unit/models/on-ear-test.js","headphones/tests/unit/models/on-ear-test.jshint.lint-test.js","headphones/tests/unit/routes/author-test.js","headphones/tests/unit/routes/author-test.jshint.lint-test.js","headphones/tests/unit/routes/contact-test.js","headphones/tests/unit/routes/contact-test.jshint.lint-test.js","headphones/tests/unit/routes/feedback-test.js","headphones/tests/unit/routes/feedback-test.jshint.lint-test.js","headphones/tests/unit/routes/headsets-test.js","headphones/tests/unit/routes/headsets-test.jshint.lint-test.js","headphones/tests/unit/routes/headsets/index-test.js","headphones/tests/unit/routes/headsets/index-test.jshint.lint-test.js","headphones/tests/unit/routes/headsets/show-test.js","headphones/tests/unit/routes/headsets/show-test.jshint.lint-test.js","headphones/tests/unit/routes/in-ear-test.js","headphones/tests/unit/routes/in-ear-test.jshint.lint-test.js","headphones/tests/unit/routes/in-ear/index-test.js","headphones/tests/unit/routes/in-ear/index-test.jshint.lint-test.js","headphones/tests/unit/routes/in-ear/show-test.js","headphones/tests/unit/routes/in-ear/show-test.jshint.lint-test.js","headphones/tests/unit/routes/index-test.js","headphones/tests/unit/routes/index-test.jshint.lint-test.js","headphones/tests/unit/routes/on-ear-test.js","headphones/tests/unit/routes/on-ear-test.jshint.lint-test.js","headphones/tests/unit/routes/on-ear/index-test.js","headphones/tests/unit/routes/on-ear/index-test.jshint.lint-test.js","headphones/tests/unit/routes/on-ear/show-test.js","headphones/tests/unit/routes/on-ear/show-test.jshint.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('headphones/tests/adapters/application.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass jshint.');\n  });\n});","define('headphones/tests/app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('headphones/tests/components/headset-listing.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/headset-listing.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/headset-listing.js should pass jshint.');\n  });\n});","define('headphones/tests/components/serach-filter.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/serach-filter.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/serach-filter.js should pass jshint.');\n  });\n});","define('headphones/tests/controllers/feedback.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/feedback.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/feedback.js should pass jshint.');\n  });\n});","define('headphones/tests/controllers/headsets/index.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/headsets/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/headsets/index.js should pass jshint.');\n  });\n});","define('headphones/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n    server.shutdown();\n  }\n});","define('headphones/tests/helpers/destroy-app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('headphones/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'headphones/tests/helpers/start-app', 'headphones/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _headphonesTestsHelpersStartApp, _headphonesTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _headphonesTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _headphonesTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('headphones/tests/helpers/module-for-acceptance.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('headphones/tests/helpers/resolver', ['exports', 'headphones/resolver', 'headphones/config/environment'], function (exports, _headphonesResolver, _headphonesConfigEnvironment) {\n\n  var resolver = _headphonesResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _headphonesConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _headphonesConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('headphones/tests/helpers/resolver.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('headphones/tests/helpers/start-app', ['exports', 'ember', 'headphones/app', 'headphones/config/environment'], function (exports, _ember, _headphonesApp, _headphonesConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    // use defaults, but you can override\n    var attributes = _ember['default'].assign({}, _headphonesConfigEnvironment['default'].APP, attrs);\n\n    _ember['default'].run(function () {\n      application = _headphonesApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('headphones/tests/helpers/start-app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('headphones/tests/integration/components/headset-listing-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('headset-listing', 'Integration | Component | headset listing', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'xlwqKGjZ',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"headset-listing\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'lwxPjW/x',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"headset-listing\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('headphones/tests/integration/components/headset-listing-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/headset-listing-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/headset-listing-test.js should pass jshint.');\n  });\n});","define('headphones/tests/integration/components/serach-filter-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('serach-filter', 'Integration | Component | serach filter', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '3Wfiwz1r',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"serach-filter\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'U71m3X6w',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"serach-filter\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('headphones/tests/integration/components/serach-filter-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/serach-filter-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/serach-filter-test.js should pass jshint.');\n  });\n});","define('headphones/tests/models/feedback.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/feedback.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/feedback.js should pass jshint.');\n  });\n});","define('headphones/tests/models/headset.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/headset.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/headset.js should pass jshint.');\n  });\n});","define('headphones/tests/models/in-ear.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/in-ear.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/in-ear.js should pass jshint.');\n  });\n});","define('headphones/tests/models/on-ear.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/on-ear.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/on-ear.js should pass jshint.');\n  });\n});","define('headphones/tests/resolver.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('headphones/tests/router.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('headphones/tests/routes/author.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/author.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/author.js should pass jshint.');\n  });\n});","define('headphones/tests/routes/contact.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/contact.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/contact.js should pass jshint.');\n  });\n});","define('headphones/tests/routes/feedback.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/feedback.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/feedback.js should pass jshint.');\n  });\n});","define('headphones/tests/routes/headsets.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/headsets.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/headsets.js should pass jshint.');\n  });\n});","define('headphones/tests/routes/headsets/index.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/headsets/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/headsets/index.js should pass jshint.');\n  });\n});","define('headphones/tests/routes/headsets/show.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/headsets/show.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/headsets/show.js should pass jshint.');\n  });\n});","define('headphones/tests/routes/in-ear.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/in-ear.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/in-ear.js should pass jshint.');\n  });\n});","define('headphones/tests/routes/in-ear/index.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/in-ear/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/in-ear/index.js should pass jshint.');\n  });\n});","define('headphones/tests/routes/in-ear/show.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/in-ear/show.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/in-ear/show.js should pass jshint.');\n  });\n});","define('headphones/tests/routes/index.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass jshint.');\n  });\n});","define('headphones/tests/routes/on-ear.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/on-ear.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/on-ear.js should pass jshint.');\n  });\n});","define('headphones/tests/routes/on-ear/index.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/on-ear/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/on-ear/index.js should pass jshint.');\n  });\n});","define('headphones/tests/routes/on-ear/show.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/on-ear/show.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/on-ear/show.js should pass jshint.');\n  });\n});","define('headphones/tests/test-helper', ['exports', 'headphones/tests/helpers/resolver', 'ember-qunit'], function (exports, _headphonesTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_headphonesTestsHelpersResolver['default']);\n});","define('headphones/tests/test-helper.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('headphones/tests/unit/adapters/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('headphones/tests/unit/adapters/application-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/adapters/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass jshint.');\n  });\n});","define('headphones/tests/unit/controllers/feedback-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:feedback', 'Unit | Controller | feedback', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('headphones/tests/unit/controllers/feedback-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/feedback-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/feedback-test.js should pass jshint.');\n  });\n});","define('headphones/tests/unit/controllers/headsets-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:headsets', 'Unit | Controller | headsets', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('headphones/tests/unit/controllers/headsets-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/headsets-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/headsets-test.js should pass jshint.');\n  });\n});","define('headphones/tests/unit/controllers/headsets/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:headsets/index', 'Unit | Controller | headsets/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('headphones/tests/unit/controllers/headsets/index-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/headsets/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/headsets/index-test.js should pass jshint.');\n  });\n});","define('headphones/tests/unit/models/feedback-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('feedback', 'Unit | Model | feedback', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('headphones/tests/unit/models/feedback-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/feedback-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/feedback-test.js should pass jshint.');\n  });\n});","define('headphones/tests/unit/models/headset-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('headset', 'Unit | Model | headset', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('headphones/tests/unit/models/headset-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/headset-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/headset-test.js should pass jshint.');\n  });\n});","define('headphones/tests/unit/models/headsets-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('headsets', 'Unit | Model | headsets', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('headphones/tests/unit/models/headsets-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/headsets-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/headsets-test.js should pass jshint.');\n  });\n});","define('headphones/tests/unit/models/on-ear-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('on-ear', 'Unit | Model | on ear', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('headphones/tests/unit/models/on-ear-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/on-ear-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/on-ear-test.js should pass jshint.');\n  });\n});","define('headphones/tests/unit/routes/author-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:author', 'Unit | Route | author', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('headphones/tests/unit/routes/author-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/author-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/author-test.js should pass jshint.');\n  });\n});","define('headphones/tests/unit/routes/contact-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:contact', 'Unit | Route | contact', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('headphones/tests/unit/routes/contact-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/contact-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/contact-test.js should pass jshint.');\n  });\n});","define('headphones/tests/unit/routes/feedback-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:feedback', 'Unit | Route | feedback', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('headphones/tests/unit/routes/feedback-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/feedback-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/feedback-test.js should pass jshint.');\n  });\n});","define('headphones/tests/unit/routes/headsets-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:headsets', 'Unit | Route | headsets', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('headphones/tests/unit/routes/headsets-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/headsets-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/headsets-test.js should pass jshint.');\n  });\n});","define('headphones/tests/unit/routes/headsets/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:headsets/index', 'Unit | Route | headsets/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('headphones/tests/unit/routes/headsets/index-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/headsets/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/headsets/index-test.js should pass jshint.');\n  });\n});","define('headphones/tests/unit/routes/headsets/show-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:headsets/show', 'Unit | Route | headsets/show', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('headphones/tests/unit/routes/headsets/show-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/headsets/show-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/headsets/show-test.js should pass jshint.');\n  });\n});","define('headphones/tests/unit/routes/in-ear-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:in-ear', 'Unit | Route | in ear', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('headphones/tests/unit/routes/in-ear-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/in-ear-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/in-ear-test.js should pass jshint.');\n  });\n});","define('headphones/tests/unit/routes/in-ear/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:in-ear/index', 'Unit | Route | in ear/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('headphones/tests/unit/routes/in-ear/index-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/in-ear/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/in-ear/index-test.js should pass jshint.');\n  });\n});","define('headphones/tests/unit/routes/in-ear/show-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:in-ear/show', 'Unit | Route | in ear/show', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('headphones/tests/unit/routes/in-ear/show-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/in-ear/show-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/in-ear/show-test.js should pass jshint.');\n  });\n});","define('headphones/tests/unit/routes/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('headphones/tests/unit/routes/index-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass jshint.');\n  });\n});","define('headphones/tests/unit/routes/on-ear-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:on-ear', 'Unit | Route | on ear', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('headphones/tests/unit/routes/on-ear-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/on-ear-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/on-ear-test.js should pass jshint.');\n  });\n});","define('headphones/tests/unit/routes/on-ear/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:on-ear/index', 'Unit | Route | on ear/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('headphones/tests/unit/routes/on-ear/index-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/on-ear/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/on-ear/index-test.js should pass jshint.');\n  });\n});","define('headphones/tests/unit/routes/on-ear/show-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:on-ear/show', 'Unit | Route | on ear/show', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('headphones/tests/unit/routes/on-ear/show-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/on-ear/show-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/on-ear/show-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('headphones/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChfile":"tests.js"}